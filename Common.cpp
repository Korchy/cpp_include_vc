//---------------------------------------------------------------------------
#pragma hdrstop
//---------------------------------------------------------------------------
#include "stdafx.h"		// Для правильной линковки
#include "Common.h"
//---------------------------------------------------------------------------
Common::Common(void) {
        // Конструктор класса

}
//---------------------------------------------------------------------------
Common::~Common() {
        // Деструктор класса

}
//---------------------------------------------------------------------------
//								ПРЕОБРАЗОВАНИЯ
//---------------------------------------------------------------------------
std::string Common::IntToStr(int Value) {
	// Преобразование int в std::string
char Buff[12];	// int = X XXX XXX XXX + знак + конец строки
_itoa_s(Value,Buff,12,10);	// Значение в буфер в десятичной системе
Buff[11] = 0;	// Конец строки
return std::string(Buff);
}
//---------------------------------------------------------------------------
int Common::StrToInt(std::string String) {
	// Преобразование std::string в int
return atoi(String.c_str());
}
//---------------------------------------------------------------------------
std::string Common::FloatToStr(float Value) {
	// Преобразование float в std::string
char Buff[_CVTBUFSIZE];	// float = XXX, XXX XXX XXX + знак + конец строки
_gcvt_s(Buff,_CVTBUFSIZE,Value,15);	// Значение в буфер в десятичной системе
return std::string(Buff);
}
//---------------------------------------------------------------------------
float Common::StrToFloat(std::string String) {
	// Преобразование std::string в float
double Rez = atof(String.c_str());
return (float)Rez;
}
//---------------------------------------------------------------------------
//								РАБОТА С ФАЙЛАМИ
//---------------------------------------------------------------------------
bool Common::FileExists(std::string File) {
	// Проверка файла на существование. Если файл существует
	// возвращает true
FILE *F;
if(fopen_s(&F,File.c_str(),"r")==NULL) {
	fclose(F);
	return true;
}
return false;
}
//---------------------------------------------------------------------------
std::string Common::GetPath(std::string FullFileName) {
	// От имени файла с путем возвращает только путь
return FullFileName.substr(0,FullFileName.find_last_of("\\",FullFileName.length()));
}
//---------------------------------------------------------------------------